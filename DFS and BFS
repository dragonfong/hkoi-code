#include <iostream>
using namespace std;
#define dimen 23
/*int arr[6][6]={
{3,0,0,0,0,0},
{8,5,0,0,0,0},
{9,4,7,0,0,0},
{6,2,3,1,0,0},
{4,2,8,5,9,0},
{3,7,6,4,2,1}}; */



int arr[23][23]={
2,3,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
4,5,8,0,8,7,7,6,5,3,6,0,7,2,1,7,2,1,7,2,5,9,2,
6,4,4,7,6,1,2,6,2,2,1,5,1,5,8,7,0,4,7,4,2,9,2,
4,5,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
0,9,2,6,8,7,7,6,5,3,6,0,7,2,1,7,2,1,7,2,5,9,2,
9,7,6,2,4,7,4,7,4,4,2,7,7,2,4,2,9,2,1,8,1,4,9,
8,4,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
0,9,2,4,4,2,2,7,3,0,4,4,8,4,7,2,4,8,4,3,8,7,3,
9,7,6,1,2,4,4,7,4,4,2,7,7,2,4,2,9,2,1,8,1,4,9,
8,4,2,4,4,2,7,6,6,1,7,7,2,2,7,5,7,8,7,8,8,0,8,
0,9,2,2,2,7,3,0,4,7,6,0,7,2,1,7,2,1,7,2,5,9,2,
9,7,6,1,2,6,2,2,1,5,0,1,5,8,7,0,4,7,4,2,9,2,1,
8,4,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
0,9,2,2,2,7,3,0,4,4,8,4,7,2,4,8,4,3,8,7,3,5,9,
9,7,6,1,2,6,2,2,1,5,1,5,8,7,0,4,7,4,2,9,2,1,9,
8,4,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
5,5,8,0,8,7,7,6,5,3,6,0,7,2,1,7,2,1,7,2,5,9,2,
9,6,4,7,6,1,2,6,2,2,1,5,1,5,8,7,0,4,7,4,2,9,2,
8,4,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
0,9,2,6,8,7,7,6,5,3,6,0,7,2,1,7,2,1,7,2,5,9,2,
9,7,6,2,4,7,4,7,4,4,2,7,7,2,4,2,9,2,1,8,1,4,9,
8,4,2,4,4,2,7,1,7,7,2,2,7,5,7,8,7,8,8,0,8,2,4,
0,9,2,4,4,2,2,7,3,0,4,4,8,4,7,2,4,8,4,3,8,7,3 };

int inQueue[dimen][dimen] = {{0}};

int dfs(int col, int row){
	//printf("%d %d\t%d\n", col, row, arr[row][col]);
	if(row == dimen-1)
		return arr[row][col];
	int down = dfs(col, row+1);
	int diagonal = dfs(col+1, row+1);
	return arr[row][col] + ((down<diagonal)?down:diagonal);
}

class queue{
	public:
		int row, col, dist, Parrow, Parcol;
};

int tail = 0;
int head = 0;

void enqueue(int row, int col, int dist, int Parrow, int Parcol, queue q[]){
	q[tail].row = row;
	q[tail].col = col;
	q[tail].dist = dist;
	q[tail].Parrow = Parrow;
	q[tail].Parcol = Parcol;
	++tail;
}

queue dequeue(queue q[]){
	return q[head++];
}

int main() {
	
	for(int a = 0; a < dimen; ++a)
		for(int b = 0; b < dimen; ++b)
			inQueue[a][b] = -1;
	
	
	// BFS
	
	
	queue q[3000];
	enqueue(0, 0, arr[0][0], -1, -1, q);
	int mindist = INT_MAX;
	int row = 0, col = 0;
	while(head!=tail){
		/*printf("\n\n\n\n%d %d\n", head, tail);
		for(int a = head; a < tail; ++a){
			printf("%d %d\n", q[a].col, q[a].row);
		}*/
		queue x = dequeue(q);
		row = x.row;
		col = x.col;
		if(x.row == dimen-1){
			if(x.dist<mindist)
				mindist = x.dist;
			continue;
		}
		if(inQueue[row+1][col] == -1){
			enqueue(row+1, col, arr[row+1][col]+x.dist, row, col, q);
			inQueue[row+1][col] = tail-1;
		}
		else{
			if(arr[row+1][col]+x.dist<q[inQueue[row+1][col]].dist){
				q[inQueue[row+1][col]].dist = arr[row+1][col]+x.dist;
				q[inQueue[row+1][col]].Parcol = x.col;
				q[inQueue[row+1][col]].Parrow = x.row;
			}
		}
		if(inQueue[row+1][col+1] == -1){
			enqueue(row+1, col+1, arr[row+1][col+1]+x.dist, row, col, q);
			inQueue[row+1][col+1] = tail-1;
		}
		else{
			if(arr[row+1][col+1]+x.dist<q[inQueue[row+1][col+1]].dist){
				q[inQueue[row+1][col+1]].dist = arr[row+1][col+1]+x.dist;
				q[inQueue[row+1][col+1]].Parcol = x.col;
				q[inQueue[row+1][col+1]].Parrow = x.row;
			}
		}
	}
	
	printf("%d", mindist);
	printf("%d", dfs(0, 0));
	
	return 0;
}
